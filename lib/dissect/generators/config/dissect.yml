# This is the default configuration file AKA "identifier", here you can find
# some useful regular expressions and some options when it comes to parse specific* structured data.
#
# *****The main structure of this file should remain intact in order the gem to work.*****

# However you can add your own regexes in the
# rest_regexes:
# and
# regexes:
# You can also make as many as you like identifiers and refer to them in the Dissect.process as arguments.
#
#
# *Structured data supported in the current version:
#
# --Mysql like Ascii art tables
#
# +------+--------+--------+
# |      | ColA   | ColB   |
# +------+--------+--------+
# | Row1 | CellA1 | CellB1 |
# | Row2 | CellA2 | CellB2 |
# | Row3 | CellA3 | CellB3 |
# +------+--------+--------+
#
# --fixed width tables like this one:
#
# Quan  Item No.    Description                             Price
# ---- ----------- ------------------------------- --------------
#   1   AUA76131   Mercedes - Benz 190 E 2.5 16v       EUR 113.34
#                  Evo 2
#   1   NOR187733  FIAT 500 WROOM VERSION               EUR 41.01
#                  K.RAIKKONEN


# encoding: utf-8
general_options:
  data_classification: structured
structured:
  # options for dissecting incoming structured data
  options:
    # more than one rows?
    multiple?: false
    # name for the multiple rows content (eg: {#{name}=>[{"a"=>1, "b"=>2}]} )
    name: "ordelines"
    # row wraps?
    multiline?: false
    # strucrure of fixed width table - number of captured groups: number of fields
    structure: {field1: "field1.size", field2: "field2.size", field3: "field3.size"}
    # orderline data start - end (will not be included - captured)
    parsing_start: "start string"
    parsing_end: "end string"
    # max length of order line -> table_line.size
    max_line: 80
    # if the multiline orderline seperates with something else than whitespace charachters
    nextmatch_seperator: /\A\s*\z/
    # need to parse and some unstructure data with regexes?
    has_also_unstructured_data?: false
  # the rest of desired captured groups
  regexes:
    # vat: /(?:(vat))\W*[a-z]*\W*(?<vat>\d+\.\d{1,2})/i
    # shipping: /(?:(shipping))\W*[a-z]*\W*(?<shipping>\d+\.\d{1,2})/i
    # ordernumber: /(?:ordernumber\W*)(?<order_number>\d{2,20})/i
    # total_price: /(?:(\btotal|\bsum|\bprice)\W*[a-z]*\W*)(?:\beu[ro]*\W*|[\u20AC]|\$|[\u00A3])(?<price>([1-9]\d*|0)(\.\d{1,2})?)/i
unstructured:
  regexes:
    # # Username
    # Username: /\A[a-zA-Z0-9_]*\z/
    # # URL
    # Url: URL: /(\A\z)|(\A(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?\z)/ix
    # # Domain
    # Domain: /(\A\z)|(\A[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?)?\z)/ix
    # # CreditCard
    # # Validates Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, space or nothing
    # CreditCard: /\A(\d{4}-){3}\d{4}\z|\A(\d{4}\s){3}\d{4}\z|\A\d{16}\z/
    # # MasterCard credit card
    # MasterCard: /\A5[1-5]\d{14}\z/
    # # Visa credit card
    # Visa: /\A4\d{15}\z/
    # # US Social Security
    # USSocialSecurity: /\A\d{3}-\d{2}-\d{4}\z/
    # # General postal code
    # # Validates a 5 digits postal code
    # GeneralPostalCode: /\A\d{5}\z/
    # # US ZIP code
    # # Validates US ZIP Code (basic and extended format)
    # ZIPCode: /\A(\d{5}\z)|(\d{5}-\d{4}\z)/
    # # Twitter username
    # TwitterUsername: /\A([a-z0-9\_])+\z/ix
    # # Github username
    # GithubUsername: /\A([a-z0-9\_\-])+\z/ix
    # # Slideshare username
    # SlideshareUsername: /\A([a-z0-9])+\z/ix
    # # Del.icio.us username
    # DeliciousUsername: /\A([a-z0-9\_\-])+\z/ix
    # # Email
    # # From the email regex research: http://fightingforalostcause.net/misc/2006/compare-email-regex.php
    # # Authors: James Watts and Francisco Jose Martin Moreno
    # Email: /\A([\w\!\#\z\%\&\'\*\+\-\/\=\?\\A\`{\|\}\~]+\.)*[\w-]+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)\z/i
    # # UUID
    # # Validates a UUID as defined: http://en.wikipedia.org/wiki/Universally_unique_identifier
    # UUID: /\A([0-9a-fA-F]{32}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\z/
    # # Date DB format YYYY-MM-DD
    # # I know it will validate 2001-02-31 but is I think we are focusing in formats more than in parsing
    # DBDate: /\A\d{4}-(#{("01".."12").to_a.join("|")})-(#{("01".."31").to_a.join("|")})\z/
    # # Date Time DB format YYYY-MM-DD hh:mm:ss
    # DBDateTime: /\A\d{4}-(#{("01".."12").to_a.join("|")})-(#{("01".."31").to_a.join("|")})\s(#{("00".."23").to_a.join("|")}):(#{("00".."59").to_a.join("|")}):(#{("00".."59").to_a.join("|")})\z/
